//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive.model

import com.lightningkite.kommon.collection.treeWalkDepthSequence
import com.lightningkite.mirror.info.MirrorClass
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*

data class ConditionEqualToOneMirror<T: Any?>(
    val TMirror: MirrorType<T>
) : MirrorClass<Condition.EqualToOne<T>>() {
    
    override val mirrorClassCompanion: MirrorClassCompanion? get() = Companion
    companion object : MirrorClassCompanion {
        val TMirrorMinimal get() = AnyMirror.nullable
        
        override val minimal = ConditionEqualToOneMirror(TypeArgumentMirrorType("T", Variance.INVARIANT, TMirrorMinimal))
        @Suppress("UNCHECKED_CAST")
        override fun make(typeArguments: List<MirrorType<*>>): MirrorClass<*> = ConditionEqualToOneMirror(typeArguments[0] as MirrorType<Any?>)
        
        @Suppress("UNCHECKED_CAST")
        fun make(
            TMirror: MirrorType<*>? = null
        ) = ConditionEqualToOneMirror<Any?>(
            TMirror = (TMirror ?: TMirrorMinimal) as MirrorType<Any?>
        )
    }
    
    override val typeParameters: Array<MirrorType<*>> get() = arrayOf(TMirror)
    override val empty: Condition.EqualToOne<T> get() = Condition.EqualToOne(
        values = ListMirror(TMirror).empty
    )
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<Condition.EqualToOne<T>> get() = Condition.EqualToOne::class as KClass<Condition.EqualToOne<T>>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.mirror.archive.model"
    override val localName: String get() = "Condition.EqualToOne"
    override val implements: Array<MirrorClass<*>> get() = arrayOf(ConditionMirror(TMirror))
    override val owningClass: KClass<*>? get() = Condition::class
    
    val fieldValues: Field<Condition.EqualToOne<T>,List<T>> = Field(
        owner = this,
        index = 0,
        name = "values",
        type = ListMirror(TMirror),
        optional = false,
        get = { it.values },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<Condition.EqualToOne<T>, *>> = arrayOf(fieldValues)
    
    override fun deserialize(decoder: Decoder): Condition.EqualToOne<T> {
        var valuesSet = false
        var fieldValues: List<T>? = null
        val decoderStructure = decoder.beginStructure(this, TMirror)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldValues = decoderStructure.decodeSerializableElement(this, 0, ListMirror(TMirror))
                    valuesSet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldValues = decoderStructure.decodeSerializableElement(this, 0, ListMirror(TMirror))
                    valuesSet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!valuesSet) {
            throw MissingFieldException("values")
        }
        return Condition.EqualToOne<T>(
            values = fieldValues as List<T>
        )
    }
    
    override fun serialize(encoder: Encoder, obj: Condition.EqualToOne<T>) {
        val encoderStructure = encoder.beginStructure(this, TMirror)
        encoderStructure.encodeSerializableElement(this, 0, ListMirror(TMirror), obj.values)
        encoderStructure.endStructure(this)
    }
}
