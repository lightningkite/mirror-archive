//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive.database

import com.lightningkite.mirror.archive.model.Condition
import com.lightningkite.mirror.archive.model.Operation
import com.lightningkite.mirror.archive.model.Sort
import com.lightningkite.mirror.info.MirrorClass
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*

data class DatabaseRequestMirror<T : Any>(
        val TMirror: MirrorType<T>
) : PolymorphicMirror<Database.Request<T>>() {

    override val mirrorClassCompanion: MirrorClassCompanion? get() = Companion

    companion object : MirrorClassCompanion {
        val TMirrorMinimal get() = AnyMirror

        override val minimal = DatabaseRequestMirror(TypeArgumentMirrorType("T", Variance.INVARIANT, TMirrorMinimal))
        @Suppress("UNCHECKED_CAST")
        override fun make(typeArguments: List<MirrorType<*>>): MirrorClass<*> = DatabaseRequestMirror(typeArguments[0] as MirrorType<Any>)

        @Suppress("UNCHECKED_CAST")
        fun make(
                TMirror: MirrorType<*>? = null
        ) = DatabaseRequestMirror<Any>(
                TMirror = (TMirror ?: TMirrorMinimal) as MirrorType<Any>
        )
    }

    override val typeParameters: Array<MirrorType<*>> get() = arrayOf(TMirror)
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<Database.Request<T>>
        get() = Database.Request::class as KClass<Database.Request<T>>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Interface)
    override val implements: Array<MirrorClass<*>> get() = arrayOf()
    override val packageName: String get() = "com.lightningkite.mirror.archive.database"
    override val localName: String get() = "Database.Request"
    override val owningClass: KClass<*>? get() = Database::class
}
