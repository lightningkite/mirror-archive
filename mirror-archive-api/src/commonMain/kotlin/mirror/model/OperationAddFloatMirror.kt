//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive.model

import com.lightningkite.mirror.info.MirrorClass
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*

object OperationAddFloatMirror : MirrorClass<Operation.AddFloat>() {
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<Operation.AddFloat>
        get() = Operation.AddFloat::class as KClass<Operation.AddFloat>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.mirror.archive.model"
    override val localName: String get() = "Operation.AddFloat"
    override val implements: Array<MirrorClass<*>> get() = arrayOf(OperationAddNumericMirror(FloatMirror))
    override val owningClass: KClass<*>? get() = Operation::class

    val fieldAmount: Field<Operation.AddFloat, Float> = Field(
            owner = this,
            index = 0,
            name = "amount",
            type = FloatMirror,
            optional = false,
            get = { it.amount },
            set = { it, value -> it.amount = value },
            annotations = listOf<Annotation>()
    )

    override val fields: Array<Field<Operation.AddFloat, *>> = arrayOf(fieldAmount)

    override fun deserialize(decoder: Decoder): Operation.AddFloat {
        var amountSet = false
        var fieldAmount: Float? = null
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldAmount = decoderStructure.decodeFloatElement(this, 0)
                    amountSet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldAmount = decoderStructure.decodeFloatElement(this, 0)
                    amountSet = true
                }
                else -> {
                }
            }
        }
        decoderStructure.endStructure(this)
        if (!amountSet) {
            throw MissingFieldException("amount")
        }
        return Operation.AddFloat(
                amount = fieldAmount as Float
        )
    }

    override fun serialize(encoder: Encoder, obj: Operation.AddFloat) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.encodeFloatElement(this, 0, obj.amount)
        encoderStructure.endStructure(this)
    }
}
