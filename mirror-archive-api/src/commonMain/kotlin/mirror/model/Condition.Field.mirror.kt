//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive.model

import com.lightningkite.kommon.collection.treeWalkDepthSequence
import com.lightningkite.mirror.info.MirrorClass
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*
import com.lightningkite.mirror.info.MirrorClassFieldMirror

data class ConditionFieldMirror<NullableT: Any?, NotNullT: NullableT, V: Any?>(
    val NullableTMirror: MirrorType<NullableT>,
    val NotNullTMirror: MirrorType<NotNullT>,
    val VMirror: MirrorType<V>
) : MirrorClass<Condition.Field<NullableT,NotNullT,V>>() {
    
    override val mirrorClassCompanion: MirrorClassCompanion? get() = Companion
    companion object : MirrorClassCompanion {
        val NullableTMirrorMinimal get() = AnyMirror.nullable
        val NotNullTMirrorMinimal get() = AnyMirror.nullable
        val VMirrorMinimal get() = AnyMirror.nullable
        
        override val minimal = ConditionFieldMirror(TypeArgumentMirrorType("NullableT", Variance.INVARIANT, NullableTMirrorMinimal), TypeArgumentMirrorType("NotNullT", Variance.INVARIANT, NotNullTMirrorMinimal), TypeArgumentMirrorType("V", Variance.INVARIANT, VMirrorMinimal))
        @Suppress("UNCHECKED_CAST")
        override fun make(typeArguments: List<MirrorType<*>>): MirrorClass<*> = ConditionFieldMirror(typeArguments[0] as MirrorType<Any?>, typeArguments[1] as MirrorType<Any?>, typeArguments[2] as MirrorType<Any?>)
        
        @Suppress("UNCHECKED_CAST")
        fun make(
            NullableTMirror: MirrorType<*>? = null,
            NotNullTMirror: MirrorType<*>? = null,
            VMirror: MirrorType<*>? = null
        ) = ConditionFieldMirror<Any?, Any?, Any?>(
            NullableTMirror = (NullableTMirror ?: NullableTMirrorMinimal) as MirrorType<Any?>,
            NotNullTMirror = (NotNullTMirror ?: NotNullTMirrorMinimal) as MirrorType<Any?>,
            VMirror = (VMirror ?: VMirrorMinimal) as MirrorType<Any?>
        )
    }
    
    override val typeParameters: Array<MirrorType<*>> get() = arrayOf(NullableTMirror, NotNullTMirror, VMirror)
    override val empty: Condition.Field<NullableT,NotNullT,V> get() = Condition.Field(
        field = MirrorClassFieldMirror(NotNullTMirror, VMirror).empty,
        condition = ConditionMirror(VMirror).empty
    )
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<Condition.Field<NullableT,NotNullT,V>> get() = Condition.Field::class as KClass<Condition.Field<NullableT,NotNullT,V>>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.mirror.archive.model"
    override val localName: String get() = "Condition.Field"
    override val implements: Array<MirrorClass<*>> get() = arrayOf(ConditionMirror(NullableTMirror))
    override val owningClass: KClass<*>? get() = Condition::class
    
    val fieldField: Field<Condition.Field<NullableT,NotNullT,V>,MirrorClass.Field<NotNullT, V>> = Field(
        owner = this,
        index = 0,
        name = "field",
        type = MirrorClassFieldMirror(NotNullTMirror, VMirror),
        optional = false,
        get = { it.field },
        annotations = listOf<Annotation>()
    )
    
    val fieldCondition: Field<Condition.Field<NullableT,NotNullT,V>,Condition<V>> = Field(
        owner = this,
        index = 1,
        name = "condition",
        type = ConditionMirror(VMirror),
        optional = false,
        get = { it.condition },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<Condition.Field<NullableT,NotNullT,V>, *>> = arrayOf(fieldField, fieldCondition)
    
    override fun deserialize(decoder: Decoder): Condition.Field<NullableT,NotNullT,V> {
        var fieldSet = false
        var fieldField: MirrorClass.Field<NotNullT, V>? = null
        var conditionSet = false
        var fieldCondition: Condition<V>? = null
        val decoderStructure = decoder.beginStructure(this, NullableTMirror, NotNullTMirror, VMirror)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldField = decoderStructure.decodeSerializableElement(this, 0, MirrorClassFieldMirror(NotNullTMirror, VMirror))
                    fieldSet = true
                    fieldCondition = decoderStructure.decodeSerializableElement(this, 1, ConditionMirror(VMirror))
                    conditionSet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldField = decoderStructure.decodeSerializableElement(this, 0, MirrorClassFieldMirror(NotNullTMirror, VMirror))
                    fieldSet = true
                }
                1 -> {
                    fieldCondition = decoderStructure.decodeSerializableElement(this, 1, ConditionMirror(VMirror))
                    conditionSet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!fieldSet) {
            throw MissingFieldException("field")
        }
        if(!conditionSet) {
            throw MissingFieldException("condition")
        }
        return Condition.Field<NullableT,NotNullT,V>(
            field = fieldField as MirrorClass.Field<NotNullT, V>,
            condition = fieldCondition as Condition<V>
        )
    }
    
    override fun serialize(encoder: Encoder, obj: Condition.Field<NullableT,NotNullT,V>) {
        val encoderStructure = encoder.beginStructure(this, NullableTMirror, NotNullTMirror, VMirror)
        encoderStructure.encodeSerializableElement(this, 0, MirrorClassFieldMirror(NotNullTMirror, VMirror), obj.field)
        encoderStructure.encodeSerializableElement(this, 1, ConditionMirror(VMirror), obj.condition)
        encoderStructure.endStructure(this)
    }
}
