//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive.model

import com.lightningkite.kommon.collection.treeWalkDepthSequence
import com.lightningkite.mirror.info.MirrorClass
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*

data class ConditionAndMirror<T: Any?>(
    val TMirror: MirrorType<T>
) : MirrorClass<Condition.And<T>>() {
    
    override val mirrorClassCompanion: MirrorClassCompanion? get() = Companion
    companion object : MirrorClassCompanion {
        val TMirrorMinimal get() = AnyMirror.nullable
        
        override val minimal = ConditionAndMirror(TypeArgumentMirrorType("T", Variance.INVARIANT, TMirrorMinimal))
        @Suppress("UNCHECKED_CAST")
        override fun make(typeArguments: List<MirrorType<*>>): MirrorClass<*> = ConditionAndMirror(typeArguments[0] as MirrorType<Any?>)

        @Suppress("UNCHECKED_CAST")
        fun make(
                TMirror: MirrorType<*>? = null
        ) = ConditionAndMirror<Any?>(
                TMirror = (TMirror ?: TMirrorMinimal) as MirrorType<Any?>
        )
    }
    
    override val typeParameters: Array<MirrorType<*>> get() = arrayOf(TMirror)
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<Condition.And<T>> get() = Condition.And::class as KClass<Condition.And<T>>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.mirror.archive.model"
    override val localName: String get() = "Condition.And"
    override val implements: Array<MirrorClass<*>> get() = arrayOf(ConditionMirror(TMirror))
    override val owningClass: KClass<*>? get() = Condition::class
    
    val fieldConditions: Field<Condition.And<T>,List<Condition<T>>> = Field(
        owner = this,
        index = 0,
        name = "conditions",
        type = ListMirror(ConditionMirror(TMirror)),
        optional = false,
        get = { it.conditions },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<Condition.And<T>, *>> = arrayOf(fieldConditions)
    
    override fun deserialize(decoder: Decoder): Condition.And<T> {
        var conditionsSet = false
        var fieldConditions: List<Condition<T>>? = null
        val decoderStructure = decoder.beginStructure(this, TMirror)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldConditions = decoderStructure.decodeSerializableElement(this, 0, ListMirror(ConditionMirror(TMirror)))
                    conditionsSet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldConditions = decoderStructure.decodeSerializableElement(this, 0, ListMirror(ConditionMirror(TMirror)))
                    conditionsSet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!conditionsSet) {
            throw MissingFieldException("conditions")
        }
        return Condition.And<T>(
            conditions = fieldConditions as List<Condition<T>>
        )
    }
    
    override fun serialize(encoder: Encoder, obj: Condition.And<T>) {
        val encoderStructure = encoder.beginStructure(this, TMirror)
        encoderStructure.encodeSerializableElement(this, 0, ListMirror(ConditionMirror(TMirror)), obj.conditions)
        encoderStructure.endStructure(this)
    }
}
