//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.kotlinx.db.influxdb

import com.lightningkite.lokalize.TimeStamp
import com.lightningkite.lokalize.now
import com.lightningkite.mirror.archive.HasId
import com.lightningkite.mirror.archive.Id
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object CPUUsageClassInfo: ClassInfo<CPUUsage> {

   override val kClass: KClass<CPUUsage> = CPUUsage::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf(Type<HasId>(HasId::class, listOf(), false))

   override val packageName: String = "com.lightningkite.kotlinx.db.influxdb"
   override val owner: KClass<*>? = null
   override val ownerName: String? = null

   override val name: String = "CPUUsage"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<CPUUsage>? = null

   val fieldId = FieldInfo<CPUUsage, Id>(this, "id", Type<Id>(Id::class, listOf(), false), true, { it.id as Id}, listOf())
    val fieldTime = FieldInfo<CPUUsage, TimeStamp>(this, "time", Type<TimeStamp>(TimeStamp::class, listOf(), false), true, { it.time as TimeStamp}, listOf())
    val fieldAmount = FieldInfo<CPUUsage, Double>(this, "amount", Type<Double>(Double::class, listOf(), false), true, { it.amount as Double}, listOf())

   override val fields:List<FieldInfo<CPUUsage, *>> = listOf(fieldId, fieldTime, fieldAmount)

   override fun construct(map: Map<String, Any?>): CPUUsage {
       //Gather variables
       
           //Handle the optionals
       val id:Id = map["id"] as? Id ?: Id.key()
        val time:TimeStamp = map["time"] as? TimeStamp ?: TimeStamp.now()
        val amount:Double = map["amount"] as? Double ?: 0.0
       //Finally do the call
       return CPUUsage(
           id = id,
            time = time,
            amount = amount
       )
   }

}